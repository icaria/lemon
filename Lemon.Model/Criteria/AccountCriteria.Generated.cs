//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v6.5.3, CSLA Templates: v4.0.0.0, CSLA Framework: v4.5.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Account.cs'.
//
//     Template: Criteria.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Data.SqlClient;

using Csla;

namespace Lemon.Model
{
    [Serializable]
    public partial class AccountCriteria : CriteriaBase<AccountCriteria>, IGeneratedCriteria
    {
        private readonly Dictionary<string, object> _bag = new Dictionary<string, object>();
        
        #region Constructors

        public AccountCriteria(){}

        public AccountCriteria(System.Int32 accountId)
        {
            AccountId = accountId;
        }

        #endregion

        #region Public Properties

        #region Read-Write

        public System.Int32 AccountId
        {
            get { return GetValue<System.Int32>("AccountId"); }
            set { _bag["AccountId"] = value; }
        }

        public System.Int32 CategoryId
        {
            get { return GetValue<System.Int32>("CategoryId"); }
            set { _bag["CategoryId"] = value; }
        }

        public System.Int32 AccountTypeId
        {
            get { return GetValue<System.Int32>("AccountTypeId"); }
            set { _bag["AccountTypeId"] = value; }
        }

        public System.String AccountNumber
        {
            get { return GetValue<System.String>("AccountNumber"); }
            set { _bag["AccountNumber"] = value; }
        }

        public System.String AccountDescription
        {
            get { return GetValue<System.String>("AccountDescription"); }
            set { _bag["AccountDescription"] = value; }
        }

        public System.Single Balance
        {
            get { return GetValue<System.Single>("Balance"); }
            set { _bag["Balance"] = value; }
        }

        public System.Int32 AccountTypeId1
        {
            get { return GetValue<System.Int32>("AccountTypeId1"); }
            set { _bag["AccountTypeId1"] = value; }
        }

        public System.Boolean HasDataConflict
        {
            get { return GetValue<System.Boolean>("HasDataConflict"); }
            set { _bag["HasDataConflict"] = value; }
        }

        public System.Int32 SyncMode
        {
            get { return GetValue<System.Int32>("SyncMode"); }
            set { _bag["SyncMode"] = value; }
        }

        public System.Int32 DoMode
        {
            get { return GetValue<System.Int32>("DoMode"); }
            set { _bag["DoMode"] = value; }
        }

        public System.Boolean CslaMetadataIsDirty
        {
            get { return GetValue<System.Boolean>("CslaMetadata_IsDirty"); }
            set { _bag["CslaMetadata_IsDirty"] = value; }
        }

        public System.Boolean CslaMetadataIsNew
        {
            get { return GetValue<System.Boolean>("CslaMetadata_IsNew"); }
            set { _bag["CslaMetadata_IsNew"] = value; }
        }

        #endregion
        
        #region Read-Only

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public Dictionary<string, object> StateBag
        {
            get
            {
                return _bag;
            }
        }

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public string TableFullName
        {
            get
            {
                return "[dbo].[Account]";
            }
        }

        #endregion

        #endregion

        #region Overrides
        
        public override string ToString()
        {
            var result = String.Empty;
            var cancel = false;
            
            OnToString(ref result, ref cancel);
            if(cancel && !String.IsNullOrEmpty(result))
                return result;
            
            if (_bag.Count == 0)
                return "No criterion was specified.";

            foreach (KeyValuePair<string, object> key in _bag)
            {
                result += String.Format("[{0}] = '{1}' AND ", key.Key, key.Value);
            }

            return result.Remove(result.Length - 5, 5);
        }

        #endregion

        #region Private Methods
        private T GetValue<T>(string name)
        {
            object value;
            if (_bag.TryGetValue(name, out value))
                return (T) value;
        
            return default(T);
        }
        
        #endregion
        
        #region Partial Methods
        
        partial void OnToString(ref string result, ref bool cancel);
        
        #endregion
        
    }
}