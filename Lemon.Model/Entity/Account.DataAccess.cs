//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v6.5.3, CSLA Templates: v4.0.0.0, CSLA Framework: v4.5.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Account.cs'.
//
//     Template: EditableChild.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;

using Csla;
using Csla.Data;

namespace Lemon.Model
{
    public partial class Account
    {
        /// <summary>
        /// Instantiates a CSLA editable child business object of type <see cref="Account"/>. 
        /// </summary>
        [RunLocal()]
        protected override void Child_Create()
        {
            bool cancel = false;
            OnChildCreating(ref cancel);
            if (cancel) return;


            BusinessRules.CheckRules();

            OnChildCreated();
        }

        /// <summary>
        /// Retrieves data from the data base into a CSLA editable child business object of type <see cref="Account"/> 
        /// using the criteria provided. 
        /// </summary>
        /// <param name="criteria">Object of type <see cref="AccountCriteria"/></param>
        /// <returns></returns>
        private void Child_Fetch(AccountCriteria criteria)
        {
            bool cancel = false;
            OnChildFetching(criteria, ref cancel);
            if (cancel) return;

            string commandText = String.Format("SELECT [AccountId], [CategoryId], [AccountTypeId], [AccountNumber], [AccountDescription], [Balance] FROM [dbo].[Account] {0}", ConnectionHelper.BuildWhereStatement(criteria.StateBag));
            using (var connection = new SqlConnection(ConnectionHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ConnectionHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if(reader.Read())
                            Map(reader);
                        else
                            throw new Exception(String.Format("The record was not found in 'dbo.Account' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnChildFetched();

        }

        #region Child_Insert
        /// <summary>
        /// Inserts data into the data base using the information in the current 
        ///    CSLA editable child business object of type <see cref="Account"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Insert(SqlConnection connection)
        {
            bool cancel = false;
            OnChildInserting(connection, ref cancel);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            const string commandText = "INSERT INTO [dbo].[Account] ([CategoryId], [AccountTypeId], [AccountNumber], [AccountDescription], [Balance]) VALUES (@_CategoryId, @_AccountTypeId, @_AccountNumber, @_AccountDescription, @_Balance); SELECT [AccountId] FROM [dbo].[Account] WHERE AccountId = SCOPE_IDENTITY()";
            using(var command = new SqlCommand(commandText, connection))
            {
                command.Parameters.AddWithValue("@_CategoryId", this.CategoryId);
                command.Parameters.AddWithValue("@_AccountTypeId", (int)this.AccountType);
                command.Parameters.AddWithValue("@_AccountNumber", ConnectionHelper.NullCheck(this.AccountNumber));
                command.Parameters.AddWithValue("@_AccountDescription", ConnectionHelper.NullCheck(this.AccountDescription));
                command.Parameters.AddWithValue("@_Balance", this.Balance);

                using(var reader = new SafeDataReader(command.ExecuteReader()))
                {
                    if(reader.Read())
                    {

                        // Update identity primary key value.
                        LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
                    }
                }
            }

            FieldManager.UpdateChildren(this, connection);

            OnChildInserted();
        }

        private void Child_Insert(Category category, SqlConnection connection)
        {
            bool cancel = false;
            OnChildInserting(category, connection, ref cancel);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            const string commandText = "INSERT INTO [dbo].[Account] ([CategoryId], [AccountTypeId], [AccountNumber], [AccountDescription], [Balance]) VALUES (@_CategoryId, @_AccountTypeId, @_AccountNumber, @_AccountDescription, @_Balance); SELECT [AccountId] FROM [dbo].[Account] WHERE AccountId = SCOPE_IDENTITY()";
            using(var command = new SqlCommand(commandText, connection))
            {
                command.Parameters.AddWithValue("@_CategoryId", category != null ? category.CategoryId : this.CategoryId);
                command.Parameters.AddWithValue("@_AccountTypeId", (int)this.AccountType);
                command.Parameters.AddWithValue("@_AccountNumber", ConnectionHelper.NullCheck(this.AccountNumber));
                command.Parameters.AddWithValue("@_AccountDescription", ConnectionHelper.NullCheck(this.AccountDescription));
                command.Parameters.AddWithValue("@_Balance", this.Balance);

                using(var reader = new SafeDataReader(command.ExecuteReader()))
                {
                    if(reader.Read())
                    {

                        // Update identity primary key value.
                        LoadProperty(_accountIdProperty, reader.GetInt32("AccountId"));
                    }
                }

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(category != null && category.CategoryId != this.CategoryId)
                    LoadProperty(_categoryIdProperty, category.CategoryId);
            }
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildInserted() and insert this child manually.
            // FieldManager.UpdateChildren(this, connection);

            OnChildInserted();
        }

        #endregion

        #region Child_Update

        /// <summary>
        /// Updates the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="Account"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_Update(SqlConnection connection)
        {
            bool cancel = false;
            OnChildUpdating(connection, ref cancel);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            const string commandText = "UPDATE [dbo].[Account] SET [CategoryId] = @_CategoryId, [AccountTypeId] = @_AccountTypeId, [AccountNumber] = @_AccountNumber, [AccountDescription] = @_AccountDescription, [Balance] = @_Balance WHERE [AccountId] = @_AccountId";
            using(var command = new SqlCommand(commandText, connection))
            {
                command.Parameters.AddWithValue("@_AccountId", this.AccountId);
                command.Parameters.AddWithValue("@_CategoryId", this.CategoryId);
                command.Parameters.AddWithValue("@_AccountTypeId", (int)this.AccountType);
                command.Parameters.AddWithValue("@_AccountNumber", ConnectionHelper.NullCheck(this.AccountNumber));
                command.Parameters.AddWithValue("@_AccountDescription", ConnectionHelper.NullCheck(this.AccountDescription));
                command.Parameters.AddWithValue("@_Balance", this.Balance);

                using(var reader = new SafeDataReader(command.ExecuteReader()))
                {
                    if(reader.Read())
                    {
                    }
                }
            }

            FieldManager.UpdateChildren(this, connection);

            OnChildUpdated();
        }
 
        private void Child_Update(Category category, SqlConnection connection)
        {
            bool cancel = false;
            OnChildUpdating(category, connection, ref cancel);
            if (cancel) return;

            if(connection.State != ConnectionState.Open) connection.Open();
            const string commandText = "UPDATE [dbo].[Account] SET [CategoryId] = @_CategoryId, [AccountTypeId] = @_AccountTypeId, [AccountNumber] = @_AccountNumber, [AccountDescription] = @_AccountDescription, [Balance] = @_Balance WHERE [AccountId] = @_AccountId";
            using(var command = new SqlCommand(commandText, connection))
            {
                command.Parameters.AddWithValue("@_AccountId", this.AccountId);
                command.Parameters.AddWithValue("@_CategoryId", category != null ? category.CategoryId : this.CategoryId);
                command.Parameters.AddWithValue("@_AccountTypeId", (int)this.AccountType);
                command.Parameters.AddWithValue("@_AccountNumber", ConnectionHelper.NullCheck(this.AccountNumber));
                command.Parameters.AddWithValue("@_AccountDescription", ConnectionHelper.NullCheck(this.AccountDescription));
                command.Parameters.AddWithValue("@_Balance", this.Balance);

                using(var reader = new SafeDataReader(command.ExecuteReader()))
                {
                    if(reader.Read())
                    {
                    }
                }

                // Update foreign keys values. This code will update the values passed in from the parent only if no errors occurred after executing the query.
                if(category != null && category.CategoryId != this.CategoryId)
                    LoadProperty(_categoryIdProperty, category.CategoryId);
            }
            
            // A child relationship exists on this Business Object but its type is not a child type (E.G. EditableChild). 
            // TODO: Please override OnChildUpdated() and update this child manually.
            // FieldManager.UpdateChildren(this, connection);

            OnChildUpdated();
        }
        #endregion

        /// <summary>
        /// Deletes the corresponding record in the data base with the information in the current 
        ///    CSLA editable child business object of type <see cref="Account"/> 
        /// </summary>
        /// <returns></returns>
        private void Child_DeleteSelf(SqlConnection connection)
        {
            bool cancel = false;
            OnChildSelfDeleting(connection, ref cancel);
            if (cancel) return;
            
            DataPortal_Delete(new AccountCriteria (AccountId), connection);
        
            OnChildSelfDeleted();
        }

        /// <summary>
        /// Deletes data in the data base using the criteria specified in the AccountCriteria object.
        /// </summary>
        /// <param name="criteria">Object of type <see cref="AccountCriteria"/></param>
        /// <returns></returns>
        protected void DataPortal_Delete(AccountCriteria criteria, SqlConnection connection)
        {
            bool cancel = false;
            OnDeleting(criteria, connection, ref cancel);
            if (cancel) return;

            var commandText = String.Format("DELETE FROM [dbo].[Account] {0}", ConnectionHelper.BuildWhereStatement(criteria.StateBag));
            using (var command = new SqlCommand(commandText, connection))
            {
                command.Parameters.AddRange(ConnectionHelper.SqlParameters(criteria.StateBag));

                //result: The number of rows changed, inserted, or deleted. -1 for select statements; 0 if no rows were affected, or the statement failed. 
                int result = command.ExecuteNonQuery();
                if (result == 0)
                    throw new DBConcurrencyException("The entity is out of date on the client. Please update the entity and try again. This could also be thrown if the sql statement failed to execute.");
            }

            OnDeleted();
        }

        #region Map

        private void Map(SafeDataReader reader)
        {
            bool cancel = false;
            OnMapping(reader, ref cancel);
            if (cancel) return;

            using(BypassPropertyChecks)
            {
                LoadProperty(_accountIdProperty, reader["AccountId"]);
                LoadProperty(_categoryIdProperty, reader["CategoryId"]);
                LoadProperty(_accountTypeProperty, reader["AccountTypeId"]);
                LoadProperty(_accountNumberProperty, reader["AccountNumber"]);
                LoadProperty(_accountDescriptionProperty, reader["AccountDescription"]);
                LoadProperty(_balanceProperty, reader["Balance"]);
            }

            OnMapped();
        }
        
        private void Child_Fetch(SafeDataReader reader)
        {
            Map(reader);
        }

        #endregion
    }
}
