//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v6.5.3, CSLA Templates: v4.0.0.0, CSLA Framework: v4.5.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Account.cs'.
//
//     Template: EditableChild.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Threading.Tasks;

using Csla;
using Csla.Data;
using System.Data.SqlClient;

using Csla.Rules;
using Lemon.Base;

namespace Lemon.Model
{
    [Serializable]
    public partial class Account : BusinessBase<Account>
    {
        #region Contructor(s)

        public Account()
        { /* Require use of factory methods */ }

        #endregion

 
        #region Business Rules

        /// <summary>
        /// Contains the CodeSmith generated validation rules.
        /// </summary>
        protected override void AddBusinessRules()
        {
            // Call the base class, if this call isn't made than any declared System.ComponentModel.DataAnnotations rules will not work.
            base.AddBusinessRules();

            if(AddBusinessValidationRules())
                return;

        }

        #endregion

        #region Properties

        private static readonly PropertyInfo<System.Int32> _accountIdProperty = RegisterProperty<System.Int32>(p => p.AccountId, "Account Id");
        [System.ComponentModel.DataObjectField(true, true)]
        [Key]
        public System.Int32 AccountId
        {
            get { return GetProperty(_accountIdProperty); }
            internal set{ SetProperty(_accountIdProperty, value); }
        }

        private static readonly PropertyInfo<System.Int32> _categoryIdProperty = RegisterProperty<System.Int32>(p => p.CategoryId, "Category Id");
        public System.Int32 CategoryId
        {
            get { return GetProperty(_categoryIdProperty); }
            set{ SetProperty(_categoryIdProperty, value); }
        }

        private static readonly PropertyInfo<AccountType> _accountTypeProperty = RegisterProperty<AccountType>(p => p.AccountType, "Account Type Id");
        [Column("AccountTypeId")]
        public AccountType AccountType
        {
            get { return GetProperty(_accountTypeProperty); }
            set { SetProperty(_accountTypeProperty, value); }
        }

        private static readonly PropertyInfo<System.String> _accountNumberProperty = RegisterProperty<System.String>(p => p.AccountNumber, "Account Number", (System.String)null);
        public System.String AccountNumber
        {
            get { return GetProperty(_accountNumberProperty); }
            set{ SetProperty(_accountNumberProperty, value); }
        }

        private static readonly PropertyInfo<System.String> _accountDescriptionProperty = RegisterProperty<System.String>(p => p.AccountDescription, "Account Description", (System.String)null);
        public System.String AccountDescription
        {
            get { return GetProperty(_accountDescriptionProperty); }
            set{ SetProperty(_accountDescriptionProperty, value); }
        }

        private static readonly PropertyInfo<System.Single> _balanceProperty = RegisterProperty<System.Single>(p => p.Balance, "Balance");
        public System.Single Balance
        {
            get { return GetProperty(_balanceProperty); }
            set{ SetProperty(_balanceProperty, value); }
        }


        private static readonly PropertyInfo<System.Boolean> _hasDataConflictProperty = RegisterProperty<System.Boolean>(p => p.HasDataConflict, "Has Data Conflict");
        [NotMapped]
        public System.Boolean HasDataConflict
        {
            get { return GetProperty(_hasDataConflictProperty); }
            set{ SetProperty(_hasDataConflictProperty, value); }
        }

        private static readonly PropertyInfo<System.Int32> _syncModeProperty = RegisterProperty<System.Int32>(p => p.SyncMode, "Sync Mode");
        [NotMapped]
        public System.Int32 SyncMode
        {
            get { return GetProperty(_syncModeProperty); }
            set{ SetProperty(_syncModeProperty, value); }
        }

        private static readonly PropertyInfo<System.Int32> _doModeProperty = RegisterProperty<System.Int32>(p => p.DoMode, "Do Mode");
        [NotMapped]
        public System.Int32 DoMode
        {
            get { return GetProperty(_doModeProperty); }
            set{ SetProperty(_doModeProperty, value); }
        }

        private static readonly PropertyInfo<System.Boolean> _cslaMetadataIsDirtyProperty = RegisterProperty<System.Boolean>(p => p.CslaMetadataIsDirty, "Csla Metadata Is Dirty");
        [NotMapped]
        public System.Boolean CslaMetadataIsDirty
        {
            get { return GetProperty(_cslaMetadataIsDirtyProperty); }
            set{ SetProperty(_cslaMetadataIsDirtyProperty, value); }
        }

        private static readonly PropertyInfo<System.Boolean> _cslaMetadataIsNewProperty = RegisterProperty<System.Boolean>(p => p.CslaMetadataIsNew, "Csla Metadata Is New");
        [NotMapped]
        public System.Boolean CslaMetadataIsNew
        {
            get { return GetProperty(_cslaMetadataIsNewProperty); }
            set{ SetProperty(_cslaMetadataIsNewProperty, value); }
        }

        // ManyToOne
        private static readonly PropertyInfo<Category> _categoryProperty = RegisterProperty<Category>(p => p.Category, Csla.RelationshipTypes.Child);
        public Category Category
        {
            get
            {
                bool cancel = false;
                OnChildLoading(_categoryProperty, ref cancel);

                if (!cancel)
                {
                    if(!FieldManager.FieldExists(_categoryProperty))
                    {
                        var criteria = new Lemon.Model.CategoryCriteria { CategoryId = CategoryId };

                        if (Lemon.Model.Category.Exists(criteria))
                            LoadProperty(_categoryProperty, Lemon.Model.Category.GetByCategoryId(CategoryId));
                    }
                }

                return GetProperty(_categoryProperty); 
            }
        }


        #endregion

        #region Synchronous Factory Methods 

        /// <summary>
        /// Creates a new object of type <see cref="Account"/>. 
        /// </summary>
        /// <returns>Returns a newly instantiated collection of type <see cref="Account"/>.</returns>
        internal static Account NewAccount()
        {
            return DataPortal.CreateChild<Account>();
        }

        internal static Account GetAccount(SafeDataReader reader)
        {
            return DataPortal.FetchChild<Account>(reader);
        }

        /// <summary>
        /// Returns a <see cref="Account"/> object of the specified criteria. 
        /// </summary>
        /// <param name="accountId">No additional detail available.</param>
        /// <returns>A <see cref="Account"/> object of the specified criteria.</returns>
        internal static Account GetByAccountId(System.Int32 accountId)
        {
            var criteria = new AccountCriteria {AccountId = accountId};
            
        
            return DataPortal.FetchChild<Account>(criteria);
        }

        /// <summary>
        /// Returns a <see cref="Account"/> object of the specified criteria. 
        /// </summary>
        /// <param name="categoryId">No additional detail available.</param>
        /// <returns>A <see cref="Account"/> object of the specified criteria.</returns>
        internal static Account GetByCategoryId(System.Int32 categoryId)
        {
            var criteria = new AccountCriteria {CategoryId = categoryId};
            
        
            return DataPortal.FetchChild<Account>(criteria);
        }

        #endregion

        #region Asynchronous Factory Methods

        internal static async Task<Account> NewAccountAsync()
        {
            return await DataPortal.CreateAsync<Account>();
        }

        internal static async Task<Account> GetByAccountIdAsync(System.Int32 accountId)
        {
            var criteria = new AccountCriteria{ AccountId = accountId};
            
            
            return await DataPortal.FetchAsync<AsyncChildLoader<Account>>(criteria).ContinueWith(t => t.Result.Child);
        }

        internal static async Task<Account> GetByCategoryIdAsync(System.Int32 categoryId)
        {
            var criteria = new AccountCriteria{ CategoryId = categoryId};
            
            
            return await DataPortal.FetchAsync<AsyncChildLoader<Account>>(criteria).ContinueWith(t => t.Result.Child);
        }

        #endregion


        #region ChildPortal partial methods

        /// <summary>
        /// CodeSmith generated stub method that is called when creating the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildCreating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Account"/> object has been created. 
        /// </summary>
        partial void OnChildCreated();

        /// <summary>
        /// CodeSmith generated stub method that is called when fetching the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="AccountCriteria"/> object containing the criteria of the object to fetch.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object fetching should proceed.</param>
        partial void OnChildFetching(AccountCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Account"/> object has been fetched. 
        /// </summary>
        partial void OnChildFetched();

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when mapping the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object mapping should proceed.</param>
        partial void OnMapping(SafeDataReader reader, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Account"/> object has been mapped. 
        /// </summary>
        partial void OnMapped();

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildInserting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when inserting the child <see cref="Account"/> object. 
        /// </summary>
        partial void OnChildInserting(Category category, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Account"/> object has been inserted. 
        /// </summary>
        partial void OnChildInserted();

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object creation should proceed.</param>
        partial void OnChildUpdating(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Account"/> object. 
        /// </summary>
        partial void OnChildUpdating(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when updating the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object insertion should proceed.</param>
        partial void OnChildUpdating(Category category, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Account"/> object has been updated. 
        /// </summary>
        partial void OnChildUpdated();

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when self deleting the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object self deletion should proceed.</param>
        partial void OnChildSelfDeleting(SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Account"/> object has been deleted. 
        /// </summary>
        partial void OnChildSelfDeleted();

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="AccountCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(AccountCriteria criteria, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called when deleting the child <see cref="Account"/> object. 
        /// </summary>
        /// <param name="criteria"><see cref="AccountCriteria"/> object containing the criteria of the object to delete.</param>
        /// <param name="connection"></param>
        /// <param name="cancel">Value returned from the method indicating whether the object deletion should proceed.</param>
        partial void OnDeleting(AccountCriteria criteria, SqlConnection connection, ref bool cancel);

        /// <summary>
        /// CodeSmith generated stub method that is called after the child <see cref="Account"/> object with the specified criteria has been deleted. 
        /// </summary>
        partial void OnDeleted();
        partial void OnChildLoading(Csla.Core.IPropertyInfo childProperty, ref bool cancel);

        #endregion

        #region Exists Command

        /// <summary>
        /// Determines if a record exists in the Account table in the database for the specified criteria. 
        /// </summary>
        /// <param name="criteria">The criteria parameter is an <see cref="Account"/> object.</param>
        /// <returns>A boolean value of true is returned if a record is found.</returns>
        public static bool Exists(AccountCriteria criteria)
        {
            return Lemon.Model.ExistsCommand.Execute(criteria);
        }

        /// <summary>
        /// Determines if a record exists in the Account table in the database for the specified criteria. 
        /// </summary>
        public static async Task<bool> ExistsAsync(AccountCriteria criteria)
        {
            return await Lemon.Model.ExistsCommand.ExecuteAsync(criteria);
        }

        #endregion

    }
}